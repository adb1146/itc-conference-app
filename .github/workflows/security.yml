name: Comprehensive Security Analysis

  on:
    push:
      branches: [main, develop]
    pull_request:
      branches: [main, develop]
    schedule:
      - cron: '0 2 * * *'
    workflow_dispatch:

  permissions:
    contents: read
    security-events: write
    pull-requests: write
    issues: write
    actions: read

  jobs:
    secret-scan:
      name: Secret Detection
      runs-on: ubuntu-latest
      steps:
        - name: Checkout code
          uses: actions/checkout@v4
          with:
            fetch-depth: 0

        - name: TruffleHog Secret Scan
          uses: trufflesecurity/trufflehog@main
          with:
            path: ./
            base: ${{ github.event.repository.default_branch }}
            head: HEAD
            extra_args: --only-verified

    semgrep:
      name: Semgrep Analysis
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v4

        - name: Semgrep Security Scan
          uses: returntocorp/semgrep-action@v1
          with:
            config: |
              p/security-audit
              p/owasp-top-ten
              p/typescript
              p/javascript
              p/react
              p/nextjs
          env:
            SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}

        - name: Upload SARIF
          uses: github/codeql-action/upload-sarif@v3
          if: always()
          with:
            sarif_file: semgrep.sarif

    dependency-check:
      name: Dependency Security
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v4

        - name: Setup Node.js
          uses: actions/setup-node@v4
          with:
            node-version: '20'
            cache: 'npm'

        - name: NPM Audit
          run: |
            npm audit --audit-level=moderate || true
            npm audit --json > npm-audit.json || true

        - name: Check for Critical Vulnerabilities
          run: |
            if grep -q '"severity":"critical"' npm-audit.json; then
              echo "Critical vulnerabilities found!"
              npm audit
              exit 1
            fi

    custom-patterns:
      name: Custom Security Patterns
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v4

        - name: Check for Hardcoded Secrets
          run: |
            echo "Checking for hardcoded secrets..."

            if grep -r "sk-[a-zA-Z0-9]\{48\}" --include="*.js" --include="*.ts" --include="*.tsx" --include="*.jsx" . 2>/dev/null; then
              echo "Potential API keys found!"
              exit 1
            fi

            if grep -r '\$2[aby]\$[0-9]\{2\}\$' --include="*.json" --exclude-dir=node_modules --exclude-dir=.git . 2>/dev/null; then
              echo "Warning: Bcrypt hashes found in files"
            fi

            if grep -r 'postgresql://[^:]*:[^@]*@' --include="*.js" --include="*.ts" --exclude-dir=node_modules . 2>/dev/null; then
              echo "Database URLs with credentials found!"
              exit 1
            fi

        - name: Check File Permissions
          run: |
            for file in $(find . -name "*.env*" -o -name "*.key" -o -name "*.pem" 2>/dev/null); do
              if [ -f "$file" ]; then
                echo "Sensitive file found: $file"
              fi
            done

    security-summary:
      name: Security Summary
      runs-on: ubuntu-latest
      needs: [secret-scan, semgrep, dependency-check, custom-patterns]
      if: always()
      steps:
        - name: Generate Security Report
          run: |
            echo "## Security Scan Summary" > security-report.md
            echo "" >> security-report.md
            echo "### Scan Results:" >> security-report.md
            echo "- Secret Detection: ${{ needs.secret-scan.result }}" >> security-report.md
            echo "- Semgrep Analysis: ${{ needs.semgrep.result }}" >> security-report.md
            echo "- Dependency Check: ${{ needs.dependency-check.result }}" >> security-report.md
            echo "- Custom Patterns: ${{ needs.custom-patterns.result }}" >> security-report.md
            echo "" >> security-report.md
            echo "**Timestamp:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> security-report.md

        - name: Upload Security Report
          uses: actions/upload-artifact@v4
          with:
            name: security-report
            path: security-report.md
