name: Comprehensive Security Analysis

  on:
    push:
      branches: [main, develop]
    pull_request:
      branches: [main, develop]
    schedule:
      - cron: '0 2 * * *'  # Daily at 2 AM UTC
    workflow_dispatch:

  permissions:
    contents: read
    security-events: write
    pull-requests: write
    issues: write
    actions: read

  jobs:
    # Job 1: TruffleHog Secret Detection
    secret-scan:
      name: Secret Detection
      runs-on: ubuntu-latest
      steps:
        - name: Checkout code
          uses: actions/checkout@v4
          with:
            fetch-depth: 0

        - name: TruffleHog Secret Scan
          uses: trufflesecurity/trufflehog@main
          with:
            path: ./
            base: ${{ github.event.repository.default_branch }}
            head: HEAD
            extra_args: --only-verified

    # Job 2: Semgrep Security Analysis
    semgrep:
      name: Semgrep Analysis
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v4

        - name: Semgrep Security Scan
          uses: returntocorp/semgrep-action@v1
          with:
            config: |
              p/security-audit
              p/owasp-top-ten
              p/typescript
              p/javascript
              p/react
              p/nextjs
          env:
            SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}

        - name: Upload SARIF
          uses: github/codeql-action/upload-sarif@v3
          if: always()
          with:
            sarif_file: semgrep.sarif

    # Job 3: Dependency Vulnerability Scan
    dependency-check:
      name: Dependency Security
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v4

        - name: Setup Node.js
          uses: actions/setup-node@v4
          with:
            node-version: '20'
            cache: 'npm'

        - name: NPM Audit
          run: |
            npm audit --audit-level=moderate
            npm audit --json > npm-audit.json || true

        - name: Check for Critical Vulnerabilities
          run: |
            if grep -q '"severity":"critical"' npm-audit.json; then
              echo "❌ Critical vulnerabilities found!"
              npm audit
              exit 1
            fi

    # Job 4: Custom Security Pattern Detection
    custom-patterns:
      name: Custom Security Patterns
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v4

        - name: Check for Hardcoded Secrets
          run: |
            echo "Checking for hardcoded secrets..."

            # Check for potential API keys
            if grep -r "sk-[a-zA-Z0-9]\{48\}" --include="*.js" --include="*.ts" --include="*.tsx" --include="*.jsx" .; then
              echo "❌ Potential API keys found!"
              exit 1
            fi

            # Check for bcrypt hashes
            if grep -r '\$2[aby]\$[0-9]\{2\}\$' --include="*.json" --exclude-dir=node_modules --exclude-dir=.git .; then
              echo "⚠️ Warning: Bcrypt hashes found in files"
            fi

            # Check for database URLs
            if grep -r 'postgresql://[^:]*:[^@]*@' --include="*.js" --include="*.ts" --exclude-dir=node_modules .; then
              echo "❌ Database URLs with credentials found!"
              exit 1
            fi

        - name: Check File Permissions
          run: |
            # Check for sensitive file patterns
            for file in $(find . -name "*.env*" -o -name "*.key" -o -name "*.pem" 2>/dev/null); do
              if [ -f "$file" ]; then
                echo "⚠️ Sensitive file found: $file"
              fi
            done

    # Job 5: Claude AI Security Review (for PRs only)
    claude-review:
      name: Claude AI Security Analysis
      if: github.event_name == 'pull_request'
      runs-on: ubuntu-latest
      needs: [secret-scan, dependency-check]

      steps:
        - uses: actions/checkout@v4
          with:
            fetch-depth: 0

        - name: Get PR Diff
          id: diff
          run: |
            git diff ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }} > pr-diff.txt
            echo "diff_size=$(wc -l < pr-diff.txt)" >> $GITHUB_OUTPUT

        - name: Claude Security Analysis
          if: steps.diff.outputs.diff_size > 0
          env:
            ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          run: |
            # Create a script for Claude API interaction
            cat > claude-review.js << 'EOF'
            const fs = require('fs');
            const https = require('https');

            const diff = fs.readFileSync('pr-diff.txt', 'utf8');

            const requestData = JSON.stringify({
              model: 'claude-3-5-sonnet-20241022',
              max_tokens: 4096,
              temperature: 0,
              system: `You are a security expert. Review this code diff for security vulnerabilities.
                       Focus on: Auth issues, XSS, SQL injection, path traversal, data exposure.
                       Format: markdown with severity levels (Critical/High/Medium/Low).`,
              messages: [
                {
                  role: 'user',
                  content: `Review this PR diff for security issues:\n\n${diff.substring(0, 30000)}`
                }
              ]
            });

            const options = {
              hostname: 'api.anthropic.com',
              path: '/v1/messages',
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
                'x-api-key': process.env.ANTHROPIC_API_KEY,
                'anthropic-version': '2023-06-01'
              }
            };

            const req = https.request(options, (res) => {
              let data = '';
              res.on('data', (chunk) => data += chunk);
              res.on('end', () => {
                try {
                  const response = JSON.parse(data);
                  if (response.content && response.content[0]) {
                    fs.writeFileSync('claude-review.md', response.content[0].text);
                    console.log('Review completed successfully');
                  }
                } catch (e) {
                  console.error('Error parsing response:', e);
                }
              });
            });

            req.on('error', (e) => console.error('Request error:', e));
            req.write(requestData);
            req.end();
            EOF

            node claude-review.js || echo "Claude review skipped (API key may not be configured)"

        - name: Post Claude Review
          if: github.event_name == 'pull_request' && success()
          uses: actions/github-script@v7
          with:
            github-token: ${{ secrets.GITHUB_TOKEN }}
            script: |
              const fs = require('fs');
              let reviewContent = '✅ Security review passed - no critical issues found.';

              if (fs.existsSync('claude-review.md')) {
                reviewContent = fs.readFileSync('claude-review.md', 'utf8');
              }

              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: `## 🔒 AI Security Review\n\n${reviewContent}\n\n---\n*Automated review by Claude AI*`
              });

    # Job 6: Security Report Summary
    security-summary:
      name: Security Summary
      runs-on: ubuntu-latest
      needs: [secret-scan, semgrep, dependency-check, custom-patterns]
      if: always()

      steps:
        - name: Generate Security Report
          run: |
            echo "## 🛡️ Security Scan Summary" > security-report.md
            echo "" >> security-report.md
            echo "### Scan Results:" >> security-report.md
            echo "- Secret Detection: ${{ needs.secret-scan.result }}" >> security-report.md
            echo "- Semgrep Analysis: ${{ needs.semgrep.result }}" >> security-report.md
            echo "- Dependency Check: ${{ needs.dependency-check.result }}" >> security-report.md
            echo "- Custom Patterns: ${{ needs.custom-patterns.result }}" >> security-report.md
            echo "" >> security-report.md
            echo "**Timestamp:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> security-report.md

        - name: Upload Security Report
          uses: actions/upload-artifact@v4
          with:
            name: security-report
            path: security-report.md
