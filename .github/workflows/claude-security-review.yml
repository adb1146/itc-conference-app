name: Claude Security Review

  on:
    pull_request:
      types: [opened, synchronize, reopened]
      paths:
        - '**.js'
        - '**.jsx'
        - '**.ts'
        - '**.tsx'
        - '**.json'
        - 'prisma/**'
        - 'app/api/**'
        - 'lib/**'
        - 'components/**'
    workflow_dispatch:

  permissions:
    contents: read
    pull-requests: write
    issues: write

  jobs:
    security-review:
      name: Claude Security Analysis
      runs-on: ubuntu-latest

      steps:
        - name: Checkout Repository
          uses: actions/checkout@v4
          with:
            fetch-depth: 0

        - name: Get Changed Files
          id: changed-files
          uses: tj-actions/changed-files@v44
          with:
            files: |
              **/*.{js,jsx,ts,tsx,json}
              prisma/**
              app/api/**
              lib/**
              components/**

        - name: Get PR Diff
          if: steps.changed-files.outputs.any_changed == 'true'
          id: diff
          run: |
            git diff ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }} > pr-diff.txt
            echo "diff_size=$(wc -l < pr-diff.txt)" >> $GITHUB_OUTPUT

        - name: Claude Security Review
          if: steps.changed-files.outputs.any_changed == 'true' && steps.diff.outputs.diff_size > 0
          env:
            ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          run: |
            # Create a script for Claude API interaction
            cat > claude-security-review.js << 'EOF'
            const fs = require('fs');
            const https = require('https');

            const diff = fs.readFileSync('pr-diff.txt', 'utf8');
            const changedFiles = process.env.CHANGED_FILES || '';

            const systemPrompt = `You are a security expert reviewing code for vulnerabilities in a Next.js conference application.
            Focus on identifying security issues in the provided code changes.

            Check for:
            1. Authentication/Authorization vulnerabilities
            2. Input validation and sanitization issues
            3. SQL injection or NoSQL injection risks
            4. XSS (Cross-Site Scripting) vulnerabilities
            5. CSRF (Cross-Site Request Forgery) risks
            6. Path traversal vulnerabilities
            7. Sensitive data exposure
            8. Insecure dependencies
            9. Rate limiting issues
            10. Security header misconfigurations

            Provide:
            - Clear description of each vulnerability found
            - Severity level (Critical/High/Medium/Low)
            - Specific line numbers and files affected
            - Recommended fixes with code examples
            - References to OWASP guidelines when applicable

            Format your response as a markdown comment suitable for GitHub PR review.
            If no security issues are found, provide security best practices relevant to the changed code.`;

            const requestData = JSON.stringify({
              model: 'claude-3-5-sonnet-20241022',
              max_tokens: 4096,
              temperature: 0,
              system: systemPrompt,
              messages: [
                {
                  role: 'user',
                  content: `Please perform a comprehensive security review of the following code changes.

                  Changed Files: ${changedFiles}

                  Diff:
                  ${diff.substring(0, 30000)}

                  Review the code for security vulnerabilities, focusing on the OWASP Top 10 and common Next.js security issues.

                  For each issue found, provide:
                  1. Issue title and severity
                  2. Affected file and line numbers
                  3. Detailed explanation of the vulnerability
                  4. Proof of concept (if applicable)
                  5. Recommended fix with code example`
                }
              ]
            });

            const options = {
              hostname: 'api.anthropic.com',
              path: '/v1/messages',
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
                'x-api-key': process.env.ANTHROPIC_API_KEY,
                'anthropic-version': '2023-06-01',
                'Content-Length': Buffer.byteLength(requestData)
              }
            };

            const req = https.request(options, (res) => {
              let data = '';

              res.on('data', (chunk) => {
                data += chunk;
              });

              res.on('end', () => {
                try {
                  const response = JSON.parse(data);
                  if (res.statusCode === 200 && response.content && response.content[0]) {
                    const review = response.content[0].text;
                    fs.writeFileSync('claude-review.md', review);
                    console.log('Review completed successfully');

                    // Also output for GitHub Actions to capture
                    console.log('::set-output name=review::' + Buffer.from(review).toString('base64'));
                  } else {
                    console.error('API Error:', data);
                    fs.writeFileSync('claude-review.md', '## üîí Security Review\n\nUnable to complete security review. Please check the 
  workflow logs for details.');
                    process.exit(1);
                  }
                } catch (e) {
                  console.error('Error parsing response:', e);
                  fs.writeFileSync('claude-review.md', '## üîí Security Review\n\nError during security review. Please check the workflow 
  logs for details.');
                  process.exit(1);
                }
              });
            });

            req.on('error', (e) => {
              console.error('Request error:', e);
              fs.writeFileSync('claude-review.md', '## üîí Security Review\n\nFailed to connect to Claude API. Please check your API key 
  configuration.');
              process.exit(1);
            });

            req.write(requestData);
            req.end();
            EOF

            export CHANGED_FILES="${{ steps.changed-files.outputs.all_changed_files }}"
            node claude-security-review.js

        - name: Post Review Results
          if: always() && steps.changed-files.outputs.any_changed == 'true'
          uses: actions/github-script@v7
          with:
            github-token: ${{ secrets.GITHUB_TOKEN }}
            script: |
              const fs = require('fs');

              // Check if review file exists
              let reviewContent = '## üîí Claude Security Review\n\n';
              if (fs.existsSync('claude-review.md')) {
                reviewContent += fs.readFileSync('claude-review.md', 'utf8');
              } else {
                reviewContent += '‚ö†Ô∏è Security review could not be completed. Please check the workflow logs for details.';
              }

              reviewContent += '\n\n---\n*This automated security review was performed by Claude AI.*';
              reviewContent += '\n*Review ID: ${{ github.run_id }}-${{ github.run_number }}*';

              // Check for existing Claude comments to update instead of creating duplicates
              const { data: comments } = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
              });

              const claudeComment = comments.find(comment =>
                comment.body.includes('üîí Claude Security Review')
              );

              if (claudeComment) {
                // Update existing comment
                await github.rest.issues.updateComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: claudeComment.id,
                  body: reviewContent,
                });
                console.log('Updated existing security review comment');
              } else {
                // Create new comment
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  body: reviewContent,
                });
                console.log('Posted new security review comment');
              }

        - name: Check for Critical Issues
          if: steps.changed-files.outputs.any_changed == 'true'
          run: |
            if [ -f claude-review.md ]; then
              if grep -q -E "(Critical|CRITICAL|High|HIGH)" claude-review.md; then
                echo "‚ö†Ô∏è Critical or High severity security issues detected!"
                echo "Please address all Critical and High severity findings before merging."
                # Uncomment the next line to block PR merging when critical issues are found
                # exit 1
              else
                echo "‚úÖ No critical security issues found"
              fi
            fi
