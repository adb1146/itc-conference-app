name: Update Production Embeddings

on:
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:  # Allow manual triggers
    inputs:
      batch_size:
        description: 'Batch size for processing'
        required: false
        default: '20'
      force_refresh:
        description: 'Force refresh all embeddings'
        required: false
        default: 'false'

jobs:
  update-embeddings:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Check environment setup
      run: |
        echo "Checking required environment variables..."
        if [ -z "${{ secrets.PRODUCTION_DATABASE_URL }}" ]; then
          echo "Error: PRODUCTION_DATABASE_URL not set"
          exit 1
        fi
        if [ -z "${{ secrets.OPENAI_API_KEY }}" ]; then
          echo "Error: OPENAI_API_KEY not set"
          exit 1
        fi
        if [ -z "${{ secrets.PINECONE_API_KEY }}" ]; then
          echo "Error: PINECONE_API_KEY not set"
          exit 1
        fi
        echo "All required environment variables are set ✅"

    - name: Run database migrations
      env:
        DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}
      run: npx prisma migrate deploy

    - name: Generate embeddings
      env:
        DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        PINECONE_API_KEY: ${{ secrets.PINECONE_API_KEY }}
        PINECONE_INDEX: itc-sessions
      run: |
        BATCH_SIZE="${{ github.event.inputs.batch_size || '20' }}"
        FORCE="${{ github.event.inputs.force_refresh || 'false' }}"

        echo "Starting embedding generation..."
        echo "Batch size: $BATCH_SIZE"
        echo "Force refresh: $FORCE"

        if [ "$FORCE" = "true" ]; then
          npm run embeddings:generate -- --batch-size $BATCH_SIZE --force
        else
          npm run embeddings:generate -- --batch-size $BATCH_SIZE
        fi

    - name: Validate embeddings
      env:
        DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        PINECONE_API_KEY: ${{ secrets.PINECONE_API_KEY }}
        PINECONE_INDEX: itc-sessions
      run: npm run embeddings:validate

    - name: Health check
      env:
        DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        PINECONE_API_KEY: ${{ secrets.PINECONE_API_KEY }}
        PINECONE_INDEX: itc-sessions
      run: npm run embeddings:health

    - name: Report status
      if: always()
      uses: actions/github-script@v6
      with:
        script: |
          const status = '${{ job.status }}';
          const runUrl = `https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}`;

          if (status === 'failure') {
            // Create an issue if the job failed
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '🚨 Embedding Update Failed',
              body: `The daily embedding update failed.\n\nWorkflow run: ${runUrl}\n\nPlease check the logs and fix any issues.`,
              labels: ['bug', 'embeddings', 'production']
            });
          }

  test-production:
    needs: update-embeddings
    runs-on: ubuntu-latest
    if: success()

    steps:
    - name: Test production health endpoint
      run: |
        RESPONSE=$(curl -s -w "\n%{http_code}" ${{ secrets.PRODUCTION_URL }}/api/embeddings/health)
        HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
        BODY=$(echo "$RESPONSE" | head -n-1)

        echo "Health check response: $BODY"
        echo "HTTP status code: $HTTP_CODE"

        if [ "$HTTP_CODE" != "200" ] && [ "$HTTP_CODE" != "206" ]; then
          echo "Health check failed with status $HTTP_CODE"
          exit 1
        fi

    - name: Test production stats endpoint
      run: |
        RESPONSE=$(curl -s ${{ secrets.PRODUCTION_URL }}/api/embeddings/stats)
        echo "Stats response: $RESPONSE"

        # Check coverage is above 90%
        COVERAGE=$(echo "$RESPONSE" | jq -r '.coverage' | sed 's/%//')
        if (( $(echo "$COVERAGE < 90" | bc -l) )); then
          echo "Warning: Embedding coverage is only $COVERAGE%"
        else
          echo "✅ Embedding coverage is $COVERAGE%"
        fi

    - name: Test meal query routing
      run: |
        echo "Testing meal query routing..."
        RESPONSE=$(curl -s -X POST ${{ secrets.PRODUCTION_URL }}/api/search \
          -H "Content-Type: application/json" \
          -d '{"query": "what about lunch?"}')

        echo "Search response: $RESPONSE"

        # Check if response contains meal sessions
        if echo "$RESPONSE" | grep -q "lunch"; then
          echo "✅ Meal query routing working correctly"
        else
          echo "⚠️ Meal query may not be routing correctly"
        fi