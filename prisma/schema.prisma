generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  id                String   @id @default(cuid())
  title             String   @unique
  description       String
  startTime         DateTime
  endTime           DateTime
  location          String
  track             String?
  level             String?
  tags              String[]
  sourceUrl         String?
  enrichedSummary   String?  @db.Text  // AI-generated comprehensive summary
  keyTakeaways      String[] @default([])  // Main learning points
  industryContext   String?  @db.Text  // Relevant industry trends and context
  relatedTopics     String[] @default([])  // Related concepts and technologies
  lastEnrichmentSync DateTime?  // When the enrichment was last fetched
  lastUpdated       DateTime @default(now())
  createdAt         DateTime @default(now())

  speakers    SessionSpeaker[]
  favorites   Favorite[]
  agendaSessions AgendaSession[]
}

model Speaker {
  id              String   @id @default(cuid())
  name            String   @unique
  bio             String?  @db.Text
  company         String?
  role            String?
  imageUrl        String?
  linkedinUrl     String?
  twitterUrl      String?
  websiteUrl      String?
  profileSummary  String?  @db.Text
  companyProfile  String?  @db.Text
  expertise       String[] @default([])
  achievements    String[] @default([])
  lastProfileSync DateTime?
  createdAt       DateTime @default(now())

  sessions  SessionSpeaker[]
  favorites Favorite[]
}

model SessionSpeaker {
  sessionId String
  speakerId String
  session   Session @relation(fields: [sessionId], references: [id])
  speaker   Speaker @relation(fields: [speakerId], references: [id])
  
  @@id([sessionId, speakerId])
}

// User Authentication Models
model User {
  id                      String    @id @default(cuid())
  email                   String    @unique
  password                String
  name                    String?
  role                    String?   // Executive, Developer, Product Manager, etc.
  company                 String?
  organizationType        String?   // Carrier, Broker, MGA/MGU, Reinsurer, etc.
  interests               String[]  // AI, Claims, Cyber, etc.
  goals                   String[]  // Learning, Networking, etc.
  usingSalesforce         Boolean   @default(false)
  interestedInSalesforce  Boolean   @default(false)
  isAdmin                 Boolean   @default(false)
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
  
  // Relations
  favorites          Favorite[]
  conversations      Conversation[]
  profile            UserProfile?
  personalizedAgendas PersonalizedAgenda[]
}

model UserProfile {
  id              String   @id @default(cuid())
  userId          String   @unique
  bio             String?
  linkedinUrl     String?
  position        String?
  yearsExperience Int?
  timezone        String?
  notifications   Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Conversation {
  id           String   @id @default(cuid())
  userId       String
  messages     Json[]   // Store conversation messages as JSON
  context      Json?    // Store conversation context
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Favorite {
  id        String   @id @default(cuid())
  sessionId String?  // Optional - for session favorites
  speakerId String?  // Optional - for speaker favorites
  userId    String
  type      String   // "session" or "speaker"
  notes     String?  // User can add notes to favorites
  reminder  Boolean  @default(false)
  createdAt DateTime @default(now())

  session   Session? @relation(fields: [sessionId], references: [id])
  speaker   Speaker? @relation(fields: [speakerId], references: [id])
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([sessionId, userId])
  @@unique([speakerId, userId])
  @@index([userId, type])
}

// Personalized Agenda Models
model PersonalizedAgenda {
  id                String   @id @default(cuid())
  userId            String
  title             String   @default("My Conference Schedule")
  description       String?
  agendaData        Json     // Stores the complete agenda structure
  metadata          Json?    // Stores reasoning, confidence scores, etc.
  isActive          Boolean  @default(true)  // Currently active agenda
  version           Int      @default(1)
  generatedBy       String   // "ai_agent", "manual", "imported"
  researchProfile   Json?    // Cached research profile used for generation
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  sessions          AgendaSession[]
  versions          AgendaVersion[]

  @@index([userId, isActive])
  @@index([userId, createdAt])
}

model AgendaSession {
  id                String   @id @default(cuid())
  agendaId          String
  sessionId         String
  dayNumber         Int      // 1, 2, or 3
  priority          Int      // 100 = must attend (favorite), 85 = highly recommended, etc.
  isLocked          Boolean  @default(false) // User locked this session
  isFavorite        Boolean  @default(false) // Session was a favorite when added
  addedReason       String?  // Why this session was recommended
  conflictResolved  Boolean  @default(false) // Was there a conflict that got resolved?
  alternativeFor    String?  // If this replaced another session due to conflict
  createdAt         DateTime @default(now())

  agenda            PersonalizedAgenda @relation(fields: [agendaId], references: [id], onDelete: Cascade)
  session           Session @relation(fields: [sessionId], references: [id])

  @@unique([agendaId, sessionId])
  @@index([agendaId, dayNumber])
}

model AgendaVersion {
  id                String   @id @default(cuid())
  agendaId          String
  version           Int
  agendaData        Json     // Snapshot of the agenda at this version
  changeDescription String?  // What changed in this version
  changedBy         String   // "user", "ai_agent", "system"
  createdAt         DateTime @default(now())

  agenda            PersonalizedAgenda @relation(fields: [agendaId], references: [id], onDelete: Cascade)

  @@unique([agendaId, version])
  @@index([agendaId, createdAt])
}